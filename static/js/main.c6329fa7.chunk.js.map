{"version":3,"sources":["reducers/myReducer.js","reducers/index.js","actions/types.js","components/Home/Home.js","actions/myAction.js","components/App/App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","inputValueFromReducer","combineReducers","myReducer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","Home","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputVal","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","submitValueAction","react_default","a","createElement","onChange","onClick","Component","connect","dispatch","App","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","ReduxThunk","app","es","BrowserRouter","basename","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAEMA,EAAgB,CACpBC,sBAAuB,ICAVC,cAAgB,CAC7BC,UDEa,WAAmC,IAAlCC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BL,EAAeQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,OAAQC,EAAOC,MACf,IERyB,aFSvB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,sBAAuBO,EAAOI,UACnD,QACE,OAAOR,kEGPLS,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAL,OAAAM,EAAA,EAAAN,CAAAO,KAAAJ,IACjBE,EAAAL,OAAAQ,EAAA,EAAAR,CAAAO,KAAAP,OAAAS,EAAA,EAAAT,CAAAG,GAAAO,KAAAH,KAAMH,KACDV,MAAQ,CAAEiB,SAAU,IACzBN,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAK,KACpBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAK,KAJHA,4EAONW,GACXT,KAAKU,SAAS,CAAEN,SAAUK,EAAEE,OAAOC,+CAGtB,IACLR,EAAaJ,KAAKb,MAAlBiB,SACRJ,KAAKH,MAAMgB,kBAAkBT,oCAGtB,IACCA,EAAaJ,KAAKb,MAAlBiB,SACApB,EAA0BgB,KAAKH,MAA/Bb,sBACR,OACE8B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOJ,MAAOR,EAAUa,SAAUjB,KAAKK,eAAgBS,EAAAC,EAAAC,cAAA,WACvDF,EAAAC,EAAAC,cAAA,UAAQxB,KAAK,SAAS0B,QAASlB,KAAKQ,cAApC,UAFF,IAEoEM,EAAAC,EAAAC,cAAA,WAClEF,EAAAC,EAAAC,cAAA,4BAAoBhC,WAxBTmC,aAmCJC,cALS,SAACjC,GAEvB,MAAO,CAAEH,sBADyBG,EAAMD,UAAhCF,wBAI8B,CAAE6B,kBCrCT,SAAAD,GAAK,OACpC,SAAAS,GAAQ,OAAIA,EAAS,CAAE7B,KFHE,aEGiBG,QAASiB,ODoCtCQ,CAAgDxB,GExBhD0B,mLARX,OACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/B,YAJvBuB,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAAMC,EAAmBJ,OAAOK,sCAAwCC,IAClEC,EAAQC,YAAYC,EAAU,GAAIL,EAAiBM,YAAgBC,OACnEC,EACJ3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUN,MAAOA,GACftB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAeC,SAAUC,sBACvB/B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOG,UAAWL,MAKxBwB,IAASC,OAAON,EAAKO,SAASC,eAAe,SD2GvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c6329fa7.chunk.js","sourcesContent":["import { INPUT_VALUE } from '../actions/types';\n\nconst INITIAL_STATE = {\n  inputValueFromReducer: '',\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case INPUT_VALUE:\n    return { ...state, inputValueFromReducer: action.payload };\n  default:\n    return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport myReducer from './myReducer';\n\nexport default combineReducers({\n  myReducer,\n});\n","export const INPUT_VALUE = 'inputValue';\n\n\nexport const MY_TYPE2 = 'myType';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { submitValueAction } from '../../actions/myAction';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputVal: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ inputVal: e.target.value });\n  }\n\n  handleSubmit() {\n    const { inputVal } = this.state;\n    this.props.submitValueAction(inputVal);\n  }\n\n  render() {\n    const { inputVal } = this.state;\n    const { inputValueFromReducer } = this.props;\n    return (\n      <div>\n        <input value={inputVal} onChange={this.handleChange} /><br />\n        <button type=\"button\" onClick={this.handleSubmit}>Submit</button> <br />\n        <span>Your value : {inputValueFromReducer}</span>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { inputValueFromReducer } = state.myReducer;\n  return { inputValueFromReducer };\n};\n\nexport default connect(mapStateToProps, { submitValueAction })(Home);\n","import { INPUT_VALUE } from './types';\n\nexport const submitValueAction = value => (\n  dispatch => dispatch({ type: INPUT_VALUE, payload: value })\n);\n\nexport const action2 = param => (\n  dispatch => dispatch({ type: INPUT_VALUE, payload: param })\n);\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport Home from '../Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport reducers from './reducers';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, {}, composeEnhancers(applyMiddleware(ReduxThunk)));\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Route component={App} />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}